type: code
files:
- name: src/Main.java
  visible: true
  text: |-
    import java.util.Scanner;

    class SelectionContext {

        private PersonSelectionAlgorithm algorithm;

        public void setAlgorithm(PersonSelectionAlgorithm algorithm) {
            // write your code here
        }

        public Person[] selectPersons(Person[] persons) {
            // write your code here
        }
    }

    interface PersonSelectionAlgorithm {

        Person[] select(Person[] persons);
    }

    class TakePersonsWithStepAlgorithm implements PersonSelectionAlgorithm {

        public TakePersonsWithStepAlgorithm(int step) {
            // write your code here
        }

        @Override
        public Person[] select(Person[] persons) {
            // write your code here
        }
    }


    class TakeLastPersonsAlgorithm implements PersonSelectionAlgorithm {

        public TakeLastPersonsAlgorithm(int count) {
            // write your code here
        }

        @Override
        public Person[] select(Person[] persons) {
            // write your code here
        }
    }

    class Person {

        String name;

        public Person(String name) {
            this.name = name;
        }
    }

    /* Do not change code below */
    public class Main {

        public static void main(String[] args) {
            final Scanner scanner = new Scanner(System.in);

            final int count = Integer.parseInt(scanner.nextLine());
            final Person[] persons = new Person[count];

            for (int i = 0; i < count; i++) {
                persons[i] = new Person(scanner.nextLine());
            }

            final String[] configs = scanner.nextLine().split("\\s+");

            final PersonSelectionAlgorithm alg = create(configs[0], Integer.parseInt(configs[1]));
            SelectionContext ctx = new SelectionContext();
            ctx.setAlgorithm(alg);

            final Person[] selected = ctx.selectPersons(persons);
            for (Person p : selected) {
                System.out.println(p.name);
            }
        }

        public static PersonSelectionAlgorithm create(String algType, int param) {
            switch (algType) {
                case "STEP": {
                    return new TakePersonsWithStepAlgorithm(param);
                }
                case "LAST": {
                    return new TakeLastPersonsAlgorithm(param);
                }
                default: {
                    throw new IllegalArgumentException("Unknown algorithm type " + algType);
                }
            }
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/3329
status: Solved
feedback:
  message: <html>Correct solution<br/><br/>Continue on <a href="https://hyperskill.org/learn/step/3329">JetBrains
    Academy</a></html>
  time: Wed, 16 Sep 2020 01:46:10 UTC
record: -1
